# GitHub Actions CI pipeline for build, lint, typecheck, DB migrations, tests & coverage.
# Runs on a VM (not a container job), so service ports must be published and reached via localhost.

name: CI

on:
  push:
    branches: ['**'] # run on all branches
  pull_request:
    branches: ['**'] # run on all PRs

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        # Ephemeral PostgreSQL service for this job.
        env:
          POSTGRES_USER: app
          POSTGRES_PASSWORD: app
          POSTGRES_DB: walletsdb_test
        # Publish container port 5432 to the runner, so we can reach it via localhost:5432
        ports:
          - '5432:5432'
        # Healthcheck helps ensure the DB is accepting connections.
        options: >-
          --health-cmd="pg_isready -U app -d walletsdb_test"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=10

    env:
      # IMPORTANT: since this job is NOT a container job, use localhost here.
      DATABASE_URL: postgresql://app:app@localhost:5432/walletsdb_test?schema=public
      JWT_SECRET: ci-secret
      JWT_EXPIRES_IN: 15m
      REFRESH_TOKEN_EXPIRES_IN: 7d
      PORT: 3000
      NODE_ENV: test

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Prisma validate
        run: npx prisma validate

      - name: Generate Prisma client
        run: npx prisma generate

      # Explicit wait for the TCP port to become reachable on localhost:5432.
      # (Uses npx to install wait-on if not present.)
      - name: Wait for Postgres (TCP 5432)
        run: npx wait-on -t 120000 tcp:localhost:5432

      - name: Apply DB migrations (non-interactive)
        run: npx prisma migrate deploy

      - name: Seed test data
        run: npm run seed

      - name: Lint (ESLint)
        run: npm run lint

      - name: Check formatting (Prettier)
        run: npm run format:check

      - name: Type check (no emit)
        run: npx tsc --noEmit

      - name: Build
        run: npm run build

      - name: Lint OpenAPI (Redocly)
        run: npm run openapi:lint

      - name: Tests (with coverage thresholds)
        run: npm run coverage

      - name: Upload coverage artifact (LCOV)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-lcov
          path: coverage/lcov.info
          if-no-files-found: error

      # Helpful debug on failure: show running containers & last Postgres logs
      - name: Debug Postgres logs on failure
        if: failure()
        run: |
          docker ps
          docker logs "$(docker ps --format '{{.Names}}' | grep postgres)" --tail 200 || true
